/* automatically generated by rust-bindgen 0.69.5 */

pub type llhttp__internal_t = llhttp__internal_s;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct llhttp__internal_s {
    pub _index: i32,
    pub _span_pos0: *mut ::libc::c_void,
    pub _span_cb0: *mut ::libc::c_void,
    pub error: i32,
    pub reason: *const ::libc::c_char,
    pub error_pos: *const ::libc::c_char,
    pub data: *mut ::libc::c_void,
    pub _current: *mut ::libc::c_void,
    pub content_length: u64,
    pub type_: u8,
    pub method: u8,
    pub http_major: u8,
    pub http_minor: u8,
    pub header_state: u8,
    pub lenient_flags: u16,
    pub upgrade: u8,
    pub finish: u8,
    pub flags: u16,
    pub status_code: u16,
    pub initial_message_completed: u8,
    pub settings: *mut ::libc::c_void,
}
#[test]
fn bindgen_test_layout_llhttp__internal_s() {
    const UNINIT: ::core::mem::MaybeUninit<llhttp__internal_s> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<llhttp__internal_s>(),
        96usize,
        concat!("Size of: ", stringify!(llhttp__internal_s))
    );
    assert_eq!(
        ::core::mem::align_of::<llhttp__internal_s>(),
        8usize,
        concat!("Alignment of ", stringify!(llhttp__internal_s))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._index) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp__internal_s),
            "::",
            stringify!(_index)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._span_pos0) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp__internal_s),
            "::",
            stringify!(_span_pos0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._span_cb0) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp__internal_s),
            "::",
            stringify!(_span_cb0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp__internal_s),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reason) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp__internal_s),
            "::",
            stringify!(reason)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).error_pos) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp__internal_s),
            "::",
            stringify!(error_pos)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp__internal_s),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._current) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp__internal_s),
            "::",
            stringify!(_current)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).content_length) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp__internal_s),
            "::",
            stringify!(content_length)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp__internal_s),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).method) as usize - ptr as usize },
        73usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp__internal_s),
            "::",
            stringify!(method)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).http_major) as usize - ptr as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp__internal_s),
            "::",
            stringify!(http_major)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).http_minor) as usize - ptr as usize },
        75usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp__internal_s),
            "::",
            stringify!(http_minor)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).header_state) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp__internal_s),
            "::",
            stringify!(header_state)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lenient_flags) as usize - ptr as usize },
        78usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp__internal_s),
            "::",
            stringify!(lenient_flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).upgrade) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp__internal_s),
            "::",
            stringify!(upgrade)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).finish) as usize - ptr as usize },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp__internal_s),
            "::",
            stringify!(finish)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp__internal_s),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).status_code) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp__internal_s),
            "::",
            stringify!(status_code)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).initial_message_completed) as usize - ptr as usize },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp__internal_s),
            "::",
            stringify!(initial_message_completed)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).settings) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp__internal_s),
            "::",
            stringify!(settings)
        )
    );
}
impl Default for llhttp__internal_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn llhttp__internal_init(s: *mut llhttp__internal_t) -> ::libc::c_int;
}
extern "C" {
    pub fn llhttp__internal_execute(
        s: *mut llhttp__internal_t,
        p: *const ::libc::c_char,
        endp: *const ::libc::c_char,
    ) -> ::libc::c_int;
}
impl llhttp_errno {
    pub const HPE_OK: llhttp_errno = llhttp_errno(0);
}
impl llhttp_errno {
    pub const HPE_INTERNAL: llhttp_errno = llhttp_errno(1);
}
impl llhttp_errno {
    pub const HPE_STRICT: llhttp_errno = llhttp_errno(2);
}
impl llhttp_errno {
    pub const HPE_CR_EXPECTED: llhttp_errno = llhttp_errno(25);
}
impl llhttp_errno {
    pub const HPE_LF_EXPECTED: llhttp_errno = llhttp_errno(3);
}
impl llhttp_errno {
    pub const HPE_UNEXPECTED_CONTENT_LENGTH: llhttp_errno = llhttp_errno(4);
}
impl llhttp_errno {
    pub const HPE_UNEXPECTED_SPACE: llhttp_errno = llhttp_errno(30);
}
impl llhttp_errno {
    pub const HPE_CLOSED_CONNECTION: llhttp_errno = llhttp_errno(5);
}
impl llhttp_errno {
    pub const HPE_INVALID_METHOD: llhttp_errno = llhttp_errno(6);
}
impl llhttp_errno {
    pub const HPE_INVALID_URL: llhttp_errno = llhttp_errno(7);
}
impl llhttp_errno {
    pub const HPE_INVALID_CONSTANT: llhttp_errno = llhttp_errno(8);
}
impl llhttp_errno {
    pub const HPE_INVALID_VERSION: llhttp_errno = llhttp_errno(9);
}
impl llhttp_errno {
    pub const HPE_INVALID_HEADER_TOKEN: llhttp_errno = llhttp_errno(10);
}
impl llhttp_errno {
    pub const HPE_INVALID_CONTENT_LENGTH: llhttp_errno = llhttp_errno(11);
}
impl llhttp_errno {
    pub const HPE_INVALID_CHUNK_SIZE: llhttp_errno = llhttp_errno(12);
}
impl llhttp_errno {
    pub const HPE_INVALID_STATUS: llhttp_errno = llhttp_errno(13);
}
impl llhttp_errno {
    pub const HPE_INVALID_EOF_STATE: llhttp_errno = llhttp_errno(14);
}
impl llhttp_errno {
    pub const HPE_INVALID_TRANSFER_ENCODING: llhttp_errno = llhttp_errno(15);
}
impl llhttp_errno {
    pub const HPE_CB_MESSAGE_BEGIN: llhttp_errno = llhttp_errno(16);
}
impl llhttp_errno {
    pub const HPE_CB_HEADERS_COMPLETE: llhttp_errno = llhttp_errno(17);
}
impl llhttp_errno {
    pub const HPE_CB_MESSAGE_COMPLETE: llhttp_errno = llhttp_errno(18);
}
impl llhttp_errno {
    pub const HPE_CB_CHUNK_HEADER: llhttp_errno = llhttp_errno(19);
}
impl llhttp_errno {
    pub const HPE_CB_CHUNK_COMPLETE: llhttp_errno = llhttp_errno(20);
}
impl llhttp_errno {
    pub const HPE_PAUSED: llhttp_errno = llhttp_errno(21);
}
impl llhttp_errno {
    pub const HPE_PAUSED_UPGRADE: llhttp_errno = llhttp_errno(22);
}
impl llhttp_errno {
    pub const HPE_PAUSED_H2_UPGRADE: llhttp_errno = llhttp_errno(23);
}
impl llhttp_errno {
    pub const HPE_USER: llhttp_errno = llhttp_errno(24);
}
impl llhttp_errno {
    pub const HPE_CB_URL_COMPLETE: llhttp_errno = llhttp_errno(26);
}
impl llhttp_errno {
    pub const HPE_CB_STATUS_COMPLETE: llhttp_errno = llhttp_errno(27);
}
impl llhttp_errno {
    pub const HPE_CB_METHOD_COMPLETE: llhttp_errno = llhttp_errno(32);
}
impl llhttp_errno {
    pub const HPE_CB_VERSION_COMPLETE: llhttp_errno = llhttp_errno(33);
}
impl llhttp_errno {
    pub const HPE_CB_HEADER_FIELD_COMPLETE: llhttp_errno = llhttp_errno(28);
}
impl llhttp_errno {
    pub const HPE_CB_HEADER_VALUE_COMPLETE: llhttp_errno = llhttp_errno(29);
}
impl llhttp_errno {
    pub const HPE_CB_CHUNK_EXTENSION_NAME_COMPLETE: llhttp_errno = llhttp_errno(34);
}
impl llhttp_errno {
    pub const HPE_CB_CHUNK_EXTENSION_VALUE_COMPLETE: llhttp_errno = llhttp_errno(35);
}
impl llhttp_errno {
    pub const HPE_CB_RESET: llhttp_errno = llhttp_errno(31);
}
impl llhttp_errno {
    pub const HPE_CB_PROTOCOL_COMPLETE: llhttp_errno = llhttp_errno(38);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct llhttp_errno(pub ::libc::c_uint);
pub use self::llhttp_errno as llhttp_errno_t;
impl llhttp_flags {
    pub const F_CONNECTION_KEEP_ALIVE: llhttp_flags = llhttp_flags(1);
}
impl llhttp_flags {
    pub const F_CONNECTION_CLOSE: llhttp_flags = llhttp_flags(2);
}
impl llhttp_flags {
    pub const F_CONNECTION_UPGRADE: llhttp_flags = llhttp_flags(4);
}
impl llhttp_flags {
    pub const F_CHUNKED: llhttp_flags = llhttp_flags(8);
}
impl llhttp_flags {
    pub const F_UPGRADE: llhttp_flags = llhttp_flags(16);
}
impl llhttp_flags {
    pub const F_CONTENT_LENGTH: llhttp_flags = llhttp_flags(32);
}
impl llhttp_flags {
    pub const F_SKIPBODY: llhttp_flags = llhttp_flags(64);
}
impl llhttp_flags {
    pub const F_TRAILING: llhttp_flags = llhttp_flags(128);
}
impl llhttp_flags {
    pub const F_TRANSFER_ENCODING: llhttp_flags = llhttp_flags(512);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct llhttp_flags(pub ::libc::c_uint);
pub use self::llhttp_flags as llhttp_flags_t;
impl llhttp_lenient_flags {
    pub const LENIENT_HEADERS: llhttp_lenient_flags = llhttp_lenient_flags(1);
}
impl llhttp_lenient_flags {
    pub const LENIENT_CHUNKED_LENGTH: llhttp_lenient_flags = llhttp_lenient_flags(2);
}
impl llhttp_lenient_flags {
    pub const LENIENT_KEEP_ALIVE: llhttp_lenient_flags = llhttp_lenient_flags(4);
}
impl llhttp_lenient_flags {
    pub const LENIENT_TRANSFER_ENCODING: llhttp_lenient_flags = llhttp_lenient_flags(8);
}
impl llhttp_lenient_flags {
    pub const LENIENT_VERSION: llhttp_lenient_flags = llhttp_lenient_flags(16);
}
impl llhttp_lenient_flags {
    pub const LENIENT_DATA_AFTER_CLOSE: llhttp_lenient_flags = llhttp_lenient_flags(32);
}
impl llhttp_lenient_flags {
    pub const LENIENT_OPTIONAL_LF_AFTER_CR: llhttp_lenient_flags = llhttp_lenient_flags(64);
}
impl llhttp_lenient_flags {
    pub const LENIENT_OPTIONAL_CRLF_AFTER_CHUNK: llhttp_lenient_flags = llhttp_lenient_flags(128);
}
impl llhttp_lenient_flags {
    pub const LENIENT_OPTIONAL_CR_BEFORE_LF: llhttp_lenient_flags = llhttp_lenient_flags(256);
}
impl llhttp_lenient_flags {
    pub const LENIENT_SPACES_AFTER_CHUNK_SIZE: llhttp_lenient_flags = llhttp_lenient_flags(512);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct llhttp_lenient_flags(pub ::libc::c_uint);
pub use self::llhttp_lenient_flags as llhttp_lenient_flags_t;
impl llhttp_type {
    pub const HTTP_BOTH: llhttp_type = llhttp_type(0);
}
impl llhttp_type {
    pub const HTTP_REQUEST: llhttp_type = llhttp_type(1);
}
impl llhttp_type {
    pub const HTTP_RESPONSE: llhttp_type = llhttp_type(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct llhttp_type(pub ::libc::c_uint);
pub use self::llhttp_type as llhttp_type_t;
pub const llhttp_finish_HTTP_FINISH_SAFE: llhttp_finish = 0;
pub const llhttp_finish_HTTP_FINISH_SAFE_WITH_CB: llhttp_finish = 1;
pub const llhttp_finish_HTTP_FINISH_UNSAFE: llhttp_finish = 2;
pub type llhttp_finish = ::libc::c_uint;
pub use self::llhttp_finish as llhttp_finish_t;
impl llhttp_method {
    pub const HTTP_DELETE: llhttp_method = llhttp_method(0);
}
impl llhttp_method {
    pub const HTTP_GET: llhttp_method = llhttp_method(1);
}
impl llhttp_method {
    pub const HTTP_HEAD: llhttp_method = llhttp_method(2);
}
impl llhttp_method {
    pub const HTTP_POST: llhttp_method = llhttp_method(3);
}
impl llhttp_method {
    pub const HTTP_PUT: llhttp_method = llhttp_method(4);
}
impl llhttp_method {
    pub const HTTP_CONNECT: llhttp_method = llhttp_method(5);
}
impl llhttp_method {
    pub const HTTP_OPTIONS: llhttp_method = llhttp_method(6);
}
impl llhttp_method {
    pub const HTTP_TRACE: llhttp_method = llhttp_method(7);
}
impl llhttp_method {
    pub const HTTP_COPY: llhttp_method = llhttp_method(8);
}
impl llhttp_method {
    pub const HTTP_LOCK: llhttp_method = llhttp_method(9);
}
impl llhttp_method {
    pub const HTTP_MKCOL: llhttp_method = llhttp_method(10);
}
impl llhttp_method {
    pub const HTTP_MOVE: llhttp_method = llhttp_method(11);
}
impl llhttp_method {
    pub const HTTP_PROPFIND: llhttp_method = llhttp_method(12);
}
impl llhttp_method {
    pub const HTTP_PROPPATCH: llhttp_method = llhttp_method(13);
}
impl llhttp_method {
    pub const HTTP_SEARCH: llhttp_method = llhttp_method(14);
}
impl llhttp_method {
    pub const HTTP_UNLOCK: llhttp_method = llhttp_method(15);
}
impl llhttp_method {
    pub const HTTP_BIND: llhttp_method = llhttp_method(16);
}
impl llhttp_method {
    pub const HTTP_REBIND: llhttp_method = llhttp_method(17);
}
impl llhttp_method {
    pub const HTTP_UNBIND: llhttp_method = llhttp_method(18);
}
impl llhttp_method {
    pub const HTTP_ACL: llhttp_method = llhttp_method(19);
}
impl llhttp_method {
    pub const HTTP_REPORT: llhttp_method = llhttp_method(20);
}
impl llhttp_method {
    pub const HTTP_MKACTIVITY: llhttp_method = llhttp_method(21);
}
impl llhttp_method {
    pub const HTTP_CHECKOUT: llhttp_method = llhttp_method(22);
}
impl llhttp_method {
    pub const HTTP_MERGE: llhttp_method = llhttp_method(23);
}
impl llhttp_method {
    pub const HTTP_MSEARCH: llhttp_method = llhttp_method(24);
}
impl llhttp_method {
    pub const HTTP_NOTIFY: llhttp_method = llhttp_method(25);
}
impl llhttp_method {
    pub const HTTP_SUBSCRIBE: llhttp_method = llhttp_method(26);
}
impl llhttp_method {
    pub const HTTP_UNSUBSCRIBE: llhttp_method = llhttp_method(27);
}
impl llhttp_method {
    pub const HTTP_PATCH: llhttp_method = llhttp_method(28);
}
impl llhttp_method {
    pub const HTTP_PURGE: llhttp_method = llhttp_method(29);
}
impl llhttp_method {
    pub const HTTP_MKCALENDAR: llhttp_method = llhttp_method(30);
}
impl llhttp_method {
    pub const HTTP_LINK: llhttp_method = llhttp_method(31);
}
impl llhttp_method {
    pub const HTTP_UNLINK: llhttp_method = llhttp_method(32);
}
impl llhttp_method {
    pub const HTTP_SOURCE: llhttp_method = llhttp_method(33);
}
impl llhttp_method {
    pub const HTTP_PRI: llhttp_method = llhttp_method(34);
}
impl llhttp_method {
    pub const HTTP_DESCRIBE: llhttp_method = llhttp_method(35);
}
impl llhttp_method {
    pub const HTTP_ANNOUNCE: llhttp_method = llhttp_method(36);
}
impl llhttp_method {
    pub const HTTP_SETUP: llhttp_method = llhttp_method(37);
}
impl llhttp_method {
    pub const HTTP_PLAY: llhttp_method = llhttp_method(38);
}
impl llhttp_method {
    pub const HTTP_PAUSE: llhttp_method = llhttp_method(39);
}
impl llhttp_method {
    pub const HTTP_TEARDOWN: llhttp_method = llhttp_method(40);
}
impl llhttp_method {
    pub const HTTP_GET_PARAMETER: llhttp_method = llhttp_method(41);
}
impl llhttp_method {
    pub const HTTP_SET_PARAMETER: llhttp_method = llhttp_method(42);
}
impl llhttp_method {
    pub const HTTP_REDIRECT: llhttp_method = llhttp_method(43);
}
impl llhttp_method {
    pub const HTTP_RECORD: llhttp_method = llhttp_method(44);
}
impl llhttp_method {
    pub const HTTP_FLUSH: llhttp_method = llhttp_method(45);
}
impl llhttp_method {
    pub const HTTP_QUERY: llhttp_method = llhttp_method(46);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct llhttp_method(pub ::libc::c_uint);
pub use self::llhttp_method as llhttp_method_t;
pub const llhttp_status_HTTP_STATUS_CONTINUE: llhttp_status = 100;
pub const llhttp_status_HTTP_STATUS_SWITCHING_PROTOCOLS: llhttp_status = 101;
pub const llhttp_status_HTTP_STATUS_PROCESSING: llhttp_status = 102;
pub const llhttp_status_HTTP_STATUS_EARLY_HINTS: llhttp_status = 103;
pub const llhttp_status_HTTP_STATUS_RESPONSE_IS_STALE: llhttp_status = 110;
pub const llhttp_status_HTTP_STATUS_REVALIDATION_FAILED: llhttp_status = 111;
pub const llhttp_status_HTTP_STATUS_DISCONNECTED_OPERATION: llhttp_status = 112;
pub const llhttp_status_HTTP_STATUS_HEURISTIC_EXPIRATION: llhttp_status = 113;
pub const llhttp_status_HTTP_STATUS_MISCELLANEOUS_WARNING: llhttp_status = 199;
pub const llhttp_status_HTTP_STATUS_OK: llhttp_status = 200;
pub const llhttp_status_HTTP_STATUS_CREATED: llhttp_status = 201;
pub const llhttp_status_HTTP_STATUS_ACCEPTED: llhttp_status = 202;
pub const llhttp_status_HTTP_STATUS_NON_AUTHORITATIVE_INFORMATION: llhttp_status = 203;
pub const llhttp_status_HTTP_STATUS_NO_CONTENT: llhttp_status = 204;
pub const llhttp_status_HTTP_STATUS_RESET_CONTENT: llhttp_status = 205;
pub const llhttp_status_HTTP_STATUS_PARTIAL_CONTENT: llhttp_status = 206;
pub const llhttp_status_HTTP_STATUS_MULTI_STATUS: llhttp_status = 207;
pub const llhttp_status_HTTP_STATUS_ALREADY_REPORTED: llhttp_status = 208;
pub const llhttp_status_HTTP_STATUS_TRANSFORMATION_APPLIED: llhttp_status = 214;
pub const llhttp_status_HTTP_STATUS_IM_USED: llhttp_status = 226;
pub const llhttp_status_HTTP_STATUS_MISCELLANEOUS_PERSISTENT_WARNING: llhttp_status = 299;
pub const llhttp_status_HTTP_STATUS_MULTIPLE_CHOICES: llhttp_status = 300;
pub const llhttp_status_HTTP_STATUS_MOVED_PERMANENTLY: llhttp_status = 301;
pub const llhttp_status_HTTP_STATUS_FOUND: llhttp_status = 302;
pub const llhttp_status_HTTP_STATUS_SEE_OTHER: llhttp_status = 303;
pub const llhttp_status_HTTP_STATUS_NOT_MODIFIED: llhttp_status = 304;
pub const llhttp_status_HTTP_STATUS_USE_PROXY: llhttp_status = 305;
pub const llhttp_status_HTTP_STATUS_SWITCH_PROXY: llhttp_status = 306;
pub const llhttp_status_HTTP_STATUS_TEMPORARY_REDIRECT: llhttp_status = 307;
pub const llhttp_status_HTTP_STATUS_PERMANENT_REDIRECT: llhttp_status = 308;
pub const llhttp_status_HTTP_STATUS_BAD_REQUEST: llhttp_status = 400;
pub const llhttp_status_HTTP_STATUS_UNAUTHORIZED: llhttp_status = 401;
pub const llhttp_status_HTTP_STATUS_PAYMENT_REQUIRED: llhttp_status = 402;
pub const llhttp_status_HTTP_STATUS_FORBIDDEN: llhttp_status = 403;
pub const llhttp_status_HTTP_STATUS_NOT_FOUND: llhttp_status = 404;
pub const llhttp_status_HTTP_STATUS_METHOD_NOT_ALLOWED: llhttp_status = 405;
pub const llhttp_status_HTTP_STATUS_NOT_ACCEPTABLE: llhttp_status = 406;
pub const llhttp_status_HTTP_STATUS_PROXY_AUTHENTICATION_REQUIRED: llhttp_status = 407;
pub const llhttp_status_HTTP_STATUS_REQUEST_TIMEOUT: llhttp_status = 408;
pub const llhttp_status_HTTP_STATUS_CONFLICT: llhttp_status = 409;
pub const llhttp_status_HTTP_STATUS_GONE: llhttp_status = 410;
pub const llhttp_status_HTTP_STATUS_LENGTH_REQUIRED: llhttp_status = 411;
pub const llhttp_status_HTTP_STATUS_PRECONDITION_FAILED: llhttp_status = 412;
pub const llhttp_status_HTTP_STATUS_PAYLOAD_TOO_LARGE: llhttp_status = 413;
pub const llhttp_status_HTTP_STATUS_URI_TOO_LONG: llhttp_status = 414;
pub const llhttp_status_HTTP_STATUS_UNSUPPORTED_MEDIA_TYPE: llhttp_status = 415;
pub const llhttp_status_HTTP_STATUS_RANGE_NOT_SATISFIABLE: llhttp_status = 416;
pub const llhttp_status_HTTP_STATUS_EXPECTATION_FAILED: llhttp_status = 417;
pub const llhttp_status_HTTP_STATUS_IM_A_TEAPOT: llhttp_status = 418;
pub const llhttp_status_HTTP_STATUS_PAGE_EXPIRED: llhttp_status = 419;
pub const llhttp_status_HTTP_STATUS_ENHANCE_YOUR_CALM: llhttp_status = 420;
pub const llhttp_status_HTTP_STATUS_MISDIRECTED_REQUEST: llhttp_status = 421;
pub const llhttp_status_HTTP_STATUS_UNPROCESSABLE_ENTITY: llhttp_status = 422;
pub const llhttp_status_HTTP_STATUS_LOCKED: llhttp_status = 423;
pub const llhttp_status_HTTP_STATUS_FAILED_DEPENDENCY: llhttp_status = 424;
pub const llhttp_status_HTTP_STATUS_TOO_EARLY: llhttp_status = 425;
pub const llhttp_status_HTTP_STATUS_UPGRADE_REQUIRED: llhttp_status = 426;
pub const llhttp_status_HTTP_STATUS_PRECONDITION_REQUIRED: llhttp_status = 428;
pub const llhttp_status_HTTP_STATUS_TOO_MANY_REQUESTS: llhttp_status = 429;
pub const llhttp_status_HTTP_STATUS_REQUEST_HEADER_FIELDS_TOO_LARGE_UNOFFICIAL: llhttp_status = 430;
pub const llhttp_status_HTTP_STATUS_REQUEST_HEADER_FIELDS_TOO_LARGE: llhttp_status = 431;
pub const llhttp_status_HTTP_STATUS_LOGIN_TIMEOUT: llhttp_status = 440;
pub const llhttp_status_HTTP_STATUS_NO_RESPONSE: llhttp_status = 444;
pub const llhttp_status_HTTP_STATUS_RETRY_WITH: llhttp_status = 449;
pub const llhttp_status_HTTP_STATUS_BLOCKED_BY_PARENTAL_CONTROL: llhttp_status = 450;
pub const llhttp_status_HTTP_STATUS_UNAVAILABLE_FOR_LEGAL_REASONS: llhttp_status = 451;
pub const llhttp_status_HTTP_STATUS_CLIENT_CLOSED_LOAD_BALANCED_REQUEST: llhttp_status = 460;
pub const llhttp_status_HTTP_STATUS_INVALID_X_FORWARDED_FOR: llhttp_status = 463;
pub const llhttp_status_HTTP_STATUS_REQUEST_HEADER_TOO_LARGE: llhttp_status = 494;
pub const llhttp_status_HTTP_STATUS_SSL_CERTIFICATE_ERROR: llhttp_status = 495;
pub const llhttp_status_HTTP_STATUS_SSL_CERTIFICATE_REQUIRED: llhttp_status = 496;
pub const llhttp_status_HTTP_STATUS_HTTP_REQUEST_SENT_TO_HTTPS_PORT: llhttp_status = 497;
pub const llhttp_status_HTTP_STATUS_INVALID_TOKEN: llhttp_status = 498;
pub const llhttp_status_HTTP_STATUS_CLIENT_CLOSED_REQUEST: llhttp_status = 499;
pub const llhttp_status_HTTP_STATUS_INTERNAL_SERVER_ERROR: llhttp_status = 500;
pub const llhttp_status_HTTP_STATUS_NOT_IMPLEMENTED: llhttp_status = 501;
pub const llhttp_status_HTTP_STATUS_BAD_GATEWAY: llhttp_status = 502;
pub const llhttp_status_HTTP_STATUS_SERVICE_UNAVAILABLE: llhttp_status = 503;
pub const llhttp_status_HTTP_STATUS_GATEWAY_TIMEOUT: llhttp_status = 504;
pub const llhttp_status_HTTP_STATUS_HTTP_VERSION_NOT_SUPPORTED: llhttp_status = 505;
pub const llhttp_status_HTTP_STATUS_VARIANT_ALSO_NEGOTIATES: llhttp_status = 506;
pub const llhttp_status_HTTP_STATUS_INSUFFICIENT_STORAGE: llhttp_status = 507;
pub const llhttp_status_HTTP_STATUS_LOOP_DETECTED: llhttp_status = 508;
pub const llhttp_status_HTTP_STATUS_BANDWIDTH_LIMIT_EXCEEDED: llhttp_status = 509;
pub const llhttp_status_HTTP_STATUS_NOT_EXTENDED: llhttp_status = 510;
pub const llhttp_status_HTTP_STATUS_NETWORK_AUTHENTICATION_REQUIRED: llhttp_status = 511;
pub const llhttp_status_HTTP_STATUS_WEB_SERVER_UNKNOWN_ERROR: llhttp_status = 520;
pub const llhttp_status_HTTP_STATUS_WEB_SERVER_IS_DOWN: llhttp_status = 521;
pub const llhttp_status_HTTP_STATUS_CONNECTION_TIMEOUT: llhttp_status = 522;
pub const llhttp_status_HTTP_STATUS_ORIGIN_IS_UNREACHABLE: llhttp_status = 523;
pub const llhttp_status_HTTP_STATUS_TIMEOUT_OCCURED: llhttp_status = 524;
pub const llhttp_status_HTTP_STATUS_SSL_HANDSHAKE_FAILED: llhttp_status = 525;
pub const llhttp_status_HTTP_STATUS_INVALID_SSL_CERTIFICATE: llhttp_status = 526;
pub const llhttp_status_HTTP_STATUS_RAILGUN_ERROR: llhttp_status = 527;
pub const llhttp_status_HTTP_STATUS_SITE_IS_OVERLOADED: llhttp_status = 529;
pub const llhttp_status_HTTP_STATUS_SITE_IS_FROZEN: llhttp_status = 530;
pub const llhttp_status_HTTP_STATUS_IDENTITY_PROVIDER_AUTHENTICATION_ERROR: llhttp_status = 561;
pub const llhttp_status_HTTP_STATUS_NETWORK_READ_TIMEOUT: llhttp_status = 598;
pub const llhttp_status_HTTP_STATUS_NETWORK_CONNECT_TIMEOUT: llhttp_status = 599;
pub type llhttp_status = ::libc::c_uint;
pub use self::llhttp_status as llhttp_status_t;
pub type llhttp_t = llhttp__internal_t;
pub type llhttp_settings_t = llhttp_settings_s;
pub type llhttp_data_cb = ::core::option::Option<
    unsafe extern "C" fn(
        arg1: *mut llhttp_t,
        at: *const ::libc::c_char,
        length: usize,
    ) -> ::libc::c_int,
>;
pub type llhttp_cb =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut llhttp_t) -> ::libc::c_int>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct llhttp_settings_s {
    pub on_message_begin: llhttp_cb,
    pub on_protocol: llhttp_data_cb,
    pub on_url: llhttp_data_cb,
    pub on_status: llhttp_data_cb,
    pub on_method: llhttp_data_cb,
    pub on_version: llhttp_data_cb,
    pub on_header_field: llhttp_data_cb,
    pub on_header_value: llhttp_data_cb,
    pub on_chunk_extension_name: llhttp_data_cb,
    pub on_chunk_extension_value: llhttp_data_cb,
    pub on_headers_complete: llhttp_cb,
    pub on_body: llhttp_data_cb,
    pub on_message_complete: llhttp_cb,
    pub on_protocol_complete: llhttp_cb,
    pub on_url_complete: llhttp_cb,
    pub on_status_complete: llhttp_cb,
    pub on_method_complete: llhttp_cb,
    pub on_version_complete: llhttp_cb,
    pub on_header_field_complete: llhttp_cb,
    pub on_header_value_complete: llhttp_cb,
    pub on_chunk_extension_name_complete: llhttp_cb,
    pub on_chunk_extension_value_complete: llhttp_cb,
    pub on_chunk_header: llhttp_cb,
    pub on_chunk_complete: llhttp_cb,
    pub on_reset: llhttp_cb,
}
#[test]
fn bindgen_test_layout_llhttp_settings_s() {
    const UNINIT: ::core::mem::MaybeUninit<llhttp_settings_s> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<llhttp_settings_s>(),
        200usize,
        concat!("Size of: ", stringify!(llhttp_settings_s))
    );
    assert_eq!(
        ::core::mem::align_of::<llhttp_settings_s>(),
        8usize,
        concat!("Alignment of ", stringify!(llhttp_settings_s))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).on_message_begin) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp_settings_s),
            "::",
            stringify!(on_message_begin)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).on_protocol) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp_settings_s),
            "::",
            stringify!(on_protocol)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).on_url) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp_settings_s),
            "::",
            stringify!(on_url)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).on_status) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp_settings_s),
            "::",
            stringify!(on_status)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).on_method) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp_settings_s),
            "::",
            stringify!(on_method)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).on_version) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp_settings_s),
            "::",
            stringify!(on_version)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).on_header_field) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp_settings_s),
            "::",
            stringify!(on_header_field)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).on_header_value) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp_settings_s),
            "::",
            stringify!(on_header_value)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).on_chunk_extension_name) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp_settings_s),
            "::",
            stringify!(on_chunk_extension_name)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).on_chunk_extension_value) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp_settings_s),
            "::",
            stringify!(on_chunk_extension_value)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).on_headers_complete) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp_settings_s),
            "::",
            stringify!(on_headers_complete)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).on_body) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp_settings_s),
            "::",
            stringify!(on_body)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).on_message_complete) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp_settings_s),
            "::",
            stringify!(on_message_complete)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).on_protocol_complete) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp_settings_s),
            "::",
            stringify!(on_protocol_complete)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).on_url_complete) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp_settings_s),
            "::",
            stringify!(on_url_complete)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).on_status_complete) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp_settings_s),
            "::",
            stringify!(on_status_complete)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).on_method_complete) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp_settings_s),
            "::",
            stringify!(on_method_complete)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).on_version_complete) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp_settings_s),
            "::",
            stringify!(on_version_complete)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).on_header_field_complete) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp_settings_s),
            "::",
            stringify!(on_header_field_complete)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).on_header_value_complete) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp_settings_s),
            "::",
            stringify!(on_header_value_complete)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).on_chunk_extension_name_complete) as usize - ptr as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp_settings_s),
            "::",
            stringify!(on_chunk_extension_name_complete)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).on_chunk_extension_value_complete) as usize - ptr as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp_settings_s),
            "::",
            stringify!(on_chunk_extension_value_complete)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).on_chunk_header) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp_settings_s),
            "::",
            stringify!(on_chunk_header)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).on_chunk_complete) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp_settings_s),
            "::",
            stringify!(on_chunk_complete)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).on_reset) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp_settings_s),
            "::",
            stringify!(on_reset)
        )
    );
}
extern "C" {
    pub fn llhttp_init(
        parser: *mut llhttp_t,
        type_: llhttp_type_t,
        settings: *const llhttp_settings_t,
    );
}
extern "C" {
    pub fn llhttp_alloc(type_: llhttp_type_t) -> *mut llhttp_t;
}
extern "C" {
    pub fn llhttp_free(parser: *mut llhttp_t);
}
extern "C" {
    pub fn llhttp_get_type(parser: *mut llhttp_t) -> u8;
}
extern "C" {
    pub fn llhttp_get_http_major(parser: *mut llhttp_t) -> u8;
}
extern "C" {
    pub fn llhttp_get_http_minor(parser: *mut llhttp_t) -> u8;
}
extern "C" {
    pub fn llhttp_get_method(parser: *mut llhttp_t) -> u8;
}
extern "C" {
    pub fn llhttp_get_status_code(parser: *mut llhttp_t) -> ::libc::c_int;
}
extern "C" {
    pub fn llhttp_get_upgrade(parser: *mut llhttp_t) -> u8;
}
extern "C" {
    pub fn llhttp_reset(parser: *mut llhttp_t);
}
extern "C" {
    pub fn llhttp_settings_init(settings: *mut llhttp_settings_t);
}
extern "C" {
    pub fn llhttp_execute(
        parser: *mut llhttp_t,
        data: *const ::libc::c_char,
        len: usize,
    ) -> llhttp_errno_t;
}
extern "C" {
    pub fn llhttp_finish(parser: *mut llhttp_t) -> llhttp_errno_t;
}
extern "C" {
    pub fn llhttp_message_needs_eof(parser: *const llhttp_t) -> ::libc::c_int;
}
extern "C" {
    pub fn llhttp_should_keep_alive(parser: *const llhttp_t) -> ::libc::c_int;
}
extern "C" {
    pub fn llhttp_pause(parser: *mut llhttp_t);
}
extern "C" {
    pub fn llhttp_resume(parser: *mut llhttp_t);
}
extern "C" {
    pub fn llhttp_resume_after_upgrade(parser: *mut llhttp_t);
}
extern "C" {
    pub fn llhttp_get_errno(parser: *const llhttp_t) -> llhttp_errno_t;
}
extern "C" {
    pub fn llhttp_get_error_reason(parser: *const llhttp_t) -> *const ::libc::c_char;
}
extern "C" {
    pub fn llhttp_set_error_reason(parser: *mut llhttp_t, reason: *const ::libc::c_char);
}
extern "C" {
    pub fn llhttp_get_error_pos(parser: *const llhttp_t) -> *const ::libc::c_char;
}
extern "C" {
    pub fn llhttp_errno_name(err: llhttp_errno_t) -> *const ::libc::c_char;
}
extern "C" {
    pub fn llhttp_method_name(method: llhttp_method_t) -> *const ::libc::c_char;
}
extern "C" {
    pub fn llhttp_status_name(status: llhttp_status_t) -> *const ::libc::c_char;
}
extern "C" {
    pub fn llhttp_set_lenient_headers(parser: *mut llhttp_t, enabled: ::libc::c_int);
}
extern "C" {
    pub fn llhttp_set_lenient_chunked_length(parser: *mut llhttp_t, enabled: ::libc::c_int);
}
extern "C" {
    pub fn llhttp_set_lenient_keep_alive(parser: *mut llhttp_t, enabled: ::libc::c_int);
}
extern "C" {
    pub fn llhttp_set_lenient_transfer_encoding(parser: *mut llhttp_t, enabled: ::libc::c_int);
}
extern "C" {
    pub fn llhttp_set_lenient_version(parser: *mut llhttp_t, enabled: ::libc::c_int);
}
extern "C" {
    pub fn llhttp_set_lenient_data_after_close(parser: *mut llhttp_t, enabled: ::libc::c_int);
}
extern "C" {
    pub fn llhttp_set_lenient_optional_lf_after_cr(parser: *mut llhttp_t, enabled: ::libc::c_int);
}
extern "C" {
    pub fn llhttp_set_lenient_optional_cr_before_lf(parser: *mut llhttp_t, enabled: ::libc::c_int);
}
extern "C" {
    pub fn llhttp_set_lenient_optional_crlf_after_chunk(
        parser: *mut llhttp_t,
        enabled: ::libc::c_int,
    );
}
extern "C" {
    pub fn llhttp_set_lenient_spaces_after_chunk_size(
        parser: *mut llhttp_t,
        enabled: ::libc::c_int,
    );
}
